class Point{constructor(x,y){this.x=x;this.y=y}}class State{constructor(x,y,radius,accept,label){this.x=x;this.y=y;this.radius=radius;this.accept=accept;this.label=label;this.start=false;this.current=false}move(x,y){this.x=x;this.y=y}draw(ctx){ctx.save();ctx.beginPath();ctx.arc(this.x,this.y,this.radius,0,2*Math.PI);ctx.lineWidth=2;ctx.stroke();ctx.fillStyle="#fef08a";if(this.current)ctx.fillStyle="#93c5fd";ctx.fill();ctx.fillStyle="black";ctx.textAlign="center";ctx.textBaseline="middle";ctx.fillText(this.label,this.x,this.y);if(this.start)this.drawStart(ctx);if(this.accept)this.drawAccept(ctx);ctx.restore()}drawStart(ctx){ctx.save();ctx.strokeStyle="black";ctx.fillStyle="black";ctx.lineWidth=2;ctx.beginPath();ctx.moveTo(this.x-this.radius-20,this.y-this.radius);ctx.lineTo(this.x-this.radius-20,this.y+this.radius);ctx.lineTo(this.x-this.radius-2,this.y);ctx.lineTo(this.x-this.radius-20,this.y-this.radius);ctx.stroke();ctx.restore()}drawAccept(ctx){ctx.lineWidth=1;ctx.beginPath();ctx.arc(this.x,this.y,this.radius-3,0,2*Math.PI);ctx.stroke()}}class Transition{constructor(fromState,toState,symbols,x=null,y=null){this.fromState=fromState;this.toState=toState;this.symbols=symbols;this.current=false;if(x!=null&&y!=null){this.x=x;this.y=y;return}if(fromState!=toState){this.x=(fromState.x+toState.x)/2;this.y=(fromState.y+toState.y)/2;return}this.x=fromState.x;this.y=fromState.y-fromState.radius-30}move(x,y){this.x=x;this.y=y}draw(ctx){ctx.save();const textHeight=12;const textLength=10*this.symbols.length;const xCoord=this.x-textLength/2;const yCoord=this.y+textHeight/2;ctx.fillText(this.symbols,xCoord,yCoord);if(!this.current){this.drawTransition(ctx);return}ctx.strokeStyle="blue";ctx.fillStyle="blue";this.drawTransition(ctx);ctx.restore()}drawTransition(ctx){if(this.fromState!=this.toState){this.drawTransitionDiff(ctx);return}this.drawTransitionSame(ctx)}drawTransitionDiff(ctx){const fromPoint=this.getStatePoint(this.fromState.x,this.fromState.y,this.fromState.radius,this.x,this.y);const toPoint=this.getStatePoint(this.toState.x,this.toState.y,this.toState.radius,this.x,this.y);ctx.beginPath();ctx.moveTo(fromPoint.x,fromPoint.y);ctx.quadraticCurveTo(this.x,this.y,toPoint.x,toPoint.y);ctx.stroke();let arrowAngle=Math.atan((toPoint.y-this.toState.y)/(toPoint.x-this.toState.x))+Math.PI/2;if(toPoint.x>=this.toState.x){arrowAngle+=Math.PI}ctx.save();ctx.beginPath();ctx.translate(toPoint.x,toPoint.y);ctx.rotate(arrowAngle);ctx.lineTo(5,10);ctx.lineTo(-5,10);ctx.lineTo(0,0);ctx.fill();ctx.restore()}drawTransitionSame(ctx){const arcPoint=this.getStatePoint(this.fromState.x,this.fromState.y,this.fromState.radius,this.x,this.y);let arrowAngle=Math.atan((arcPoint.y-this.toState.y)/(arcPoint.x-this.toState.x))+Math.PI/2;if(arcPoint.x>=this.toState.x)arrowAngle+=Math.PI;ctx.save();ctx.beginPath();ctx.translate(arcPoint.x,arcPoint.y);ctx.rotate(arrowAngle+10*(Math.PI/180));ctx.arc(0,0,this.fromState.radius,0,200*(Math.PI/180));ctx.stroke();ctx.restore();ctx.save();ctx.translate(this.fromState.x,this.fromState.y);ctx.beginPath();let r=this.fromState.radius;ctx.rotate(arrowAngle+-40*(Math.PI/180));ctx.moveTo(0,r);ctx.lineTo(5,10+r);ctx.lineTo(-5,10+r);ctx.lineTo(0,r);ctx.fill();ctx.restore()}getStatePoint(stateX,stateY,radius,outsideX,outsideY){const A=new Point(outsideX,outsideY);const B=new Point(stateX,stateY);const opposite=A.y-B.y;const adjacent=A.x-B.x;const theta=Math.atan(opposite/adjacent);const P=new Point(Math.cos(theta)*radius,Math.sin(theta)*radius);if(adjacent<0){P.x*=-1;P.y*=-1}P.x+=B.x;P.y+=B.y;return P}}class Automata{startState=null;states=[];transitions=[];input="";inputIndex=0;addState(x,y,label){const state=new State(x,y,20,false,label);this.states.push(state)}addTransition(from,to,symbols,x=null,y=null){const transition=new Transition(from,to,symbols,x,y);this.transitions.push(transition)}removeState(state){const stateTransitions=this.transitions.filter(t=>t.fromState==state||t.toState==state);stateTransitions.forEach(t=>this.removeTransition(t));this.states=this.states.filter(s=>s!=state);if(state.start)this.startState=null}removeTransition(transition){this.transitions=this.transitions.filter(t=>t!=transition)}setStart(state){if(this.startState!=null)this.startState.start=false;this.startState=state;state.start=true}reset(input=null){if(input!=null)this.input=input;this.inputIndex=0;const elements=this.states.concat(this.transitions);elements.forEach(e=>e.current=false);this.startState.current=true;this.processEpsilons()}step(){const symbol=this.input.charAt(this.inputIndex);let currentTransitions=[];for(let transition of this.transitions){if(transition.symbols.includes(symbol)&&transition.fromState.current){currentTransitions.push(transition);transition.current=true;continue}transition.current=false}this.states.forEach(s=>s.current=false);currentTransitions.forEach(t=>t.toState.current=true);this.processEpsilons()}processEpsilons(){let epsilonTransitions=[];epsilonTransitions=this.transitions.filter(t=>t.symbols.includes("λ"));let updated=true;while(updated){updated=false;for(let transition of epsilonTransitions){if(!transition.fromState.current)continue;transition.current=true;if(!transition.toState.current){transition.toState.current=true;updated=true}}}}findState(label){return this.states.find(s=>s.label==label)}newthis(){this.startState=null;this.states.length=0;this.transitions.length=0;this.input="";this.inputIndex=0}toString(){let out=[];out.push("States");for(let s of this.states){let line=[];line.push(s.x,s.y,s.start,s.accept,s.label);out.push(line.join())}out.push("Transitions");for(let t of this.transitions){let line=[];line.push(t.fromState.label,t.toState.label,t.symbols,t.x,t.y);out.push(line.join())}return out.join("\n")}}class CanvasController{constructor(canvas,fa){this.fa=fa;this.canvas=canvas;this.ctx=canvas.getContext("2d");this.ctx.font="16px sans-serif";this.mousePressed=false;this.ctrlPressed=false;this.selected=[];this.menuContainer=null;this.menuContainer=document.createElement("div");this.menuContainer.classList.add("menu-wrapper");const menuOptionsNames=["Adicionar estado","Remover estado","Adicionar transição","Remover transição","Final","Definir como inicial"];let menuOptions={};menuOptionsNames.forEach(optionName=>{menuOptions[optionName]=document.createElement("div");menuOptions[optionName].innerText=optionName;menuOptions[optionName].classList.add("menuItem")});const setFinalCheckbox=document.createElement("input");setFinalCheckbox.type="checkbox";setFinalCheckbox.id="setFinalCheckbox";menuOptions["Final"].appendChild(setFinalCheckbox);menuOptions["Final"].classList.add("optFinal");this.defaultMenu=document.createElement("div");this.defaultMenu.appendChild(menuOptions["Adicionar estado"]);this.stateMenu=document.createElement("div");this.stateMenu.appendChild(menuOptions["Remover estado"]);this.stateMenu.appendChild(menuOptions["Adicionar transição"]);this.stateMenu.appendChild(menuOptions["Definir como inicial"]);this.stateMenu.appendChild(menuOptions["Final"]);this.transitionMenu=document.createElement("div");this.transitionMenu.appendChild(menuOptions["Remover transição"]);this.addStateMenu=document.createElement("div");const{stateCreateButton,stateCancelButton}=this.createStateCreationUI();this.addTransitionMenu=document.createElement("div");const{transitionCreateButton,transitionCancelButton}=this.createTransitionCreationUI();this.canvas.addEventListener("mousemove",this.mouseMoveHandle);this.canvas.addEventListener("mousedown",this.mouseDownHandle);this.canvas.addEventListener("mouseup",this.mouseUpHandle);this.canvas.addEventListener("contextmenu",this.openMenu);const docHtml=document.getElementsByTagName("html")[0];docHtml.addEventListener("keydown",this.onKeyDown);docHtml.addEventListener("keyup",this.onKeyUp);menuOptions["Adicionar estado"].addEventListener("click",this.openAddStateMenu);stateCreateButton.addEventListener("click",this.createState);stateCancelButton.addEventListener("click",this.cancelStateCreate);setFinalCheckbox.addEventListener("click",this.toggleFinal);menuOptions["Definir como inicial"].addEventListener("click",this.makeStart);menuOptions["Adicionar transição"].addEventListener("click",this.openAddTransitionMenu);transitionCreateButton.addEventListener("click",this.createTransition);transitionCancelButton.addEventListener("click",this.cancelTransitionCreate);menuOptions["Remover estado"].addEventListener("click",this.deleteState);menuOptions["Remover transição"].addEventListener("click",this.deleteTransition)}createStateCreationUI(){const nameDiv=document.createElement("div");const nameLabel=document.createElement("label");nameLabel.innerText="Nome:";const nameInput=document.createElement("input");nameInput.id="stateLabelInput";nameInput.type="text";nameDiv.appendChild(nameLabel);nameDiv.appendChild(nameInput);const createButton=document.createElement("button");createButton.innerText="Criar";createButton.id="stateCreateButton";const cancelButton=document.createElement("button");cancelButton.innerText="Cancelar";cancelButton.id="stateCancelButton";const buttonDiv=document.createElement("div");buttonDiv.appendChild(createButton);buttonDiv.appendChild(cancelButton);buttonDiv.classList.add("buttonDiv");this.addStateMenu.classList.add("addStateMenu");this.addStateMenu.appendChild(nameDiv);this.addStateMenu.appendChild(buttonDiv);return{stateCreateButton:createButton,stateCancelButton:cancelButton}}createTransitionCreationUI(){const toStateDiv=document.createElement("div");const toStateLabel=document.createElement("label");toStateLabel.innerText="Para:";const toStateInput=document.createElement("input");toStateInput.id="targetInput";toStateInput.type="text";toStateDiv.appendChild(toStateLabel);toStateDiv.appendChild(toStateInput);const symbolDiv=document.createElement("div");const symbolLabel=document.createElement("label");symbolLabel.innerText="Símbolo:";const symbolInput=document.createElement("input");symbolInput.id="symbolInput";symbolInput.type="text";symbolDiv.appendChild(symbolLabel);symbolDiv.appendChild(symbolInput);const buttonDiv=document.createElement("div");buttonDiv.classList.add("buttonDiv");const createButton=document.createElement("button");createButton.innerText="Criar";createButton.id="transitionCreateButton";const cancelButton=document.createElement("button");cancelButton.innerText="Cancelar";cancelButton.id="transitionCancelButton";buttonDiv.appendChild(createButton);buttonDiv.appendChild(cancelButton);this.addTransitionMenu.classList.add("addTransitionMenu");this.addTransitionMenu.appendChild(toStateDiv);this.addTransitionMenu.appendChild(symbolDiv);this.addTransitionMenu.appendChild(buttonDiv);return{transitionCreateButton:createButton,transitionCancelButton:cancelButton}}openMenu=e=>{e.preventDefault();this.menuContainer.x=e.offsetX;this.menuContainer.y=e.offsetY;this.menuContainer.selected=this.checkForElement(e.offsetX,e.offsetY);if(this.menuContainer.selected==null)this.menuContainer.appendChild(this.defaultMenu);else if(this.menuContainer.selected instanceof State)this.menuContainer.appendChild(this.stateMenu);else if(this.menuContainer.selected instanceof Transition)this.menuContainer.appendChild(this.transitionMenu);this.menuContainer.style.top=`${e.offsetY}px`;this.menuContainer.style.left=`${e.offsetX}px`;document.getElementById("canvasDiv").appendChild(this.menuContainer);if(this.menuContainer.selected instanceof State)document.querySelector("#setFinalCheckbox").checked=this.menuContainer.selected.accept;this.redraw()};closeMenu=()=>{if(!this.menuContainer.parentNode)return;this.menuContainer.parentNode.removeChild(this.menuContainer);this.menuContainer.removeChild(this.menuContainer.firstChild)};openAddStateMenu=()=>{this.closeMenu();this.menuContainer.appendChild(this.addStateMenu);document.getElementById("canvasDiv").appendChild(this.menuContainer);this.redraw()};createState=()=>{const label=document.getElementById("stateLabelInput");const previousLabelValue=label.value;if(previousLabelValue==""){setWarning("O estado precisa ter um nome!");return}if(this.fa.findState(previousLabelValue)!=null){setWarning(`Já existe um estado com o nome ${previousLabelValue}!`);return}this.fa.addState(this.menuContainer.x,this.menuContainer.y,previousLabelValue);this.redraw();this.closeMenu();label.value=""};cancelStateCreate=()=>{document.getElementById("stateLabelInput").value="";this.closeMenu()};toggleFinal=e=>{this.menuContainer.selected.accept=e.target.checked;this.redraw();this.closeMenu()};makeStart=()=>{this.fa.setStart(this.menuContainer.selected);this.redraw();this.closeMenu()};deleteState=()=>{this.fa.removeState(this.menuContainer.selected);this.redraw();this.closeMenu()};openAddTransitionMenu=()=>{this.closeMenu();this.menuContainer.appendChild(this.addTransitionMenu);document.getElementById("canvasDiv").appendChild(this.menuContainer);this.redraw()};createTransition=()=>{const previousToState=document.getElementById("targetInput");const previousToStateName=previousToState.value;const toState=this.fa.findState(previousToStateName);const symbols=document.getElementById("symbolInput");let previousSymbols=symbols.value;if(previousToStateName==""){setWarning("É necessário um estado de destino (pode ser ele mesmo)!");return}if(toState==null){setWarning(`Não há estado cujo nome é ${previousToStateName}!`);return}if(previousSymbols=="")previousSymbols="λ";this.fa.addTransition(this.menuContainer.selected,toState,previousSymbols);this.redraw();this.closeMenu();previousToState.value="";symbols.value=""};cancelTransitionCreate=()=>{document.getElementById("targetInput").value="";document.getElementById("symbolInput").value="";this.closeMenu()};deleteTransition=()=>{this.fa.removeTransition(this.menuContainer.selected);this.redraw();this.closeMenu()};redraw=()=>{this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const elements=this.fa.states.concat(this.fa.transitions);elements.forEach(e=>e.draw(this.ctx));if(this.selectionBoxX==null)return;this.ctx.beginPath();this.ctx.moveTo(this.selectionBoxX,this.selectionBoxY);this.ctx.lineTo(this.selectionBoxX,this.lastY);this.ctx.lineTo(this.lastX,this.lastY);this.ctx.lineTo(this.lastX,this.selectionBoxY);this.ctx.lineTo(this.selectionBoxX,this.selectionBoxY);this.ctx.stroke()};mouseUpHandle=e=>{if(this.selectionBoxX!=null){this.checkForElements(this.selectionBoxX,this.selectionBoxY,this.lastX,this.lastY);this.selectionBoxX=null;this.selectionBoxY=null}else if(!this.ctrlPressed)this.selected.length=0;this.mousePressed=false};mouseMoveHandle=e=>{this.deltaX=e.offsetX-this.lastX;this.deltaY=e.offsetY-this.lastY;this.lastX=e.offsetX;this.lastY=e.offsetY;if(!this.mousePressed)return;this.selected.forEach(e=>e.move(e.x+this.deltaX,e.y+this.deltaY));this.redraw()};mouseDownHandle=e=>{this.closeMenu();if(e.button!=0)return;this.mousePressed=true;const target=this.checkForElement(e.offsetX,e.offsetY);if(target!=null&&!this.selected.includes(target)){this.selected.push(target);return}if(this.ctrlPressed)return;this.selected.length=0;this.selectionBoxX=e.offsetX;this.selectionBoxY=e.offsetY};onKeyDown=e=>{if(e.key!="Control")return;this.ctrlPressed=true};onKeyUp=e=>{if(e.key!="Control")return;this.selected.length=0;this.ctrlPressed=false;this.redraw()};checkForElement=(x,y)=>{for(let s of this.fa.states){if(x<s.x+s.radius&&x>s.x-s.radius&&y<s.y+s.radius&&y>s.y-s.radius)return s}for(let t of this.fa.transitions){if(x<t.x+t.symbols.length*10/2&&x>t.x-t.symbols.length*10/2&&y<t.y+6&&y>t.y-6)return t}return null};checkForElements(x1,y1,x2,y2){const[xMin,yMin,xMax,yMax]=[Math.min(x1,x2),Math.min(y1,y2),Math.max(x1,x2),Math.max(y1,y2)];const elements=this.fa.states.concat(this.fa.transitions).filter(e=>xMin<e.x&&e.x<xMax&&yMin<e.y&&e.y<yMax);this.selected=this.selected.concat(elements)}}